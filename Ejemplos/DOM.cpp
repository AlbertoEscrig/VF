// =================================================================================================
// ========================================================================================= DOM.cpp
//
// Radiación y conducción en el seno de un gas gris
//
// ================================================================= Copyright © 2025 Alberto Escrig
// =================================================================================================

import VF;
import std;

// -------------------------------------------------------------------------------------- Constantes

constexpr double σ = 5.67e-8,
                 π = std::numbers::pi;

constexpr VF::TVector3D s[] = {{ 0.2646,  0.2646,  0.9257},
                               {-0.2646,  0.2646,  0.9257},
                               { 0.2646, -0.2646,  0.9257},
                               { 0.2646,  0.2646, -0.9257},
                               {-0.2646, -0.2646,  0.9257},
                               {-0.2646,  0.2646, -0.9257},
                               { 0.2646, -0.2646, -0.9257},
                               {-0.2646, -0.2646, -0.9257},

                               { 0.2646,  0.9257,  0.2646},
                               {-0.2646,  0.9257,  0.2646},
                               { 0.2646, -0.9257,  0.2646},
                               { 0.2646,  0.9257, -0.2646},
                               {-0.2646, -0.9257,  0.2646},
                               {-0.2646,  0.9257, -0.2646},
                               { 0.2646, -0.9257, -0.2646},
                               {-0.2646, -0.9257, -0.2646},

                               { 0.9257,  0.2646,  0.2646},
                               {-0.9257,  0.2646,  0.2646},
                               { 0.9257, -0.2646,  0.2646},
                               { 0.9257,  0.2646, -0.2646},
                               {-0.9257, -0.2646,  0.2646},
                               {-0.9257,  0.2646, -0.2646},
                               { 0.9257, -0.2646, -0.2646},
                               {-0.9257, -0.2646, -0.2646}};

constexpr double w = π / 6.0;

constexpr double a = 0.5,
                 λ = 1.0;

constexpr double Thot = 1000.0,
                 Tcold = 300.0;

int main()
{
// ------------------------------------------------------------------------------------------- Malla

VF::TMalla3D::Read("Enclosure.msh");

// ------------------------------------------------------------------------------------------ Campos

VF::TCampoEscalar3D T,
                    G,
                    I[24u];

// ------------------------------------------------------------------------- Condiciones de contorno

T.DefCC<VF::TDirichlet>("hot", Thot);
T.DefCC<VF::TDirichlet>("cold", Tcold);

for (unsigned int i = 0u; i < 24u; ++i)
  {
  I[i].DefCC<VF::TDirichlet>("hot", σ * VF::pow<4u>(Thot) / π);
  I[i].DefCC<VF::TDirichlet>("cold", σ * VF::pow<4u>(Tcold) / π);
  }

// --------------------------------------------------------------------------- Condiciones iniciales

solve(lap(T) == 0, T);

// ---------------------------------------------------------------------------------------- Solución

while (true)
  {
  for (unsigned int i = 0u; i < 24u; ++i)
    solve(div(s[i] * I[i]) + a * (+I[i]) == a * σ * pow<4u>(T) / π, I[i]);

  G = 0.0;
  for (unsigned int i = 0u; i < 24u; ++i)
    G += w * I[i];

  VF::TCampo const TOld = T;

  solve(4.0 * a * σ * pow<3u>(T) * (+T) - λ * lap(T) == a * G, T);

  if (max(mag(T - TOld)) < 0.1)
    break;
  }

// -------------------------------------------------------------------------------------- Resultados

std::ofstream ofs("resu.vtk");

VF::TMalla3D::Write(ofs);
T.Write(ofs, "T");
G.Write(ofs, "G");

return 0;
}
